name: Build and Package Syphon

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-Syphon:
    strategy:
      matrix:
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install required build dependencies for Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libfreetype6-dev
          sudo apt-get install libgl-dev libglib2.0-dev libgtk-3-dev libpango1.0-dev libx11-dev libxtst-dev zlib1g-dev
      - name: Set up GraalVM JDK 20.0.1
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '20.0.1'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          set-java-home: true
          cache: 'maven'
          components: 'native-image'
      - name: Set Up Maven version 3.8.8 # For GUI build issues, maven version 3.8.8 needs to be used
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.8
      - name: Build platform-specific C object for missing jdk libraries
        run: gcc -c config/missing_symbols.c -o config/missing_symbols-${{ matrix.os }}.o
      - name: Package Syphon for ${{ matrix.os }} with GluonFX maven plugin
        run: mvn -P build-for-${{ matrix.os }} gluonfx:build gluonfx:package
      - name: Create Application Type specific folders
        run: |
          mkdir App
      - name: Categorise build artifacts for linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |          
          mv target/gluonfx/x86_64-linux/Syphon "target/gluonfx/x86_64-linux/Syphon_linux"
          mv "target/gluonfx/x86_64-linux/Syphon_linux" -t App
      - name: Categorise build artifacts for windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Rename-Item target/gluonfx/x86_64-windows/Syphon-1.0.msi "Syphon.msi"
          Rename-Item target/gluonfx/x86_64-windows/Syphon.exe "Syphon.exe"
          move "target/gluonfx/x86_64-windows/Syphon.msi" App
          move "target/gluonfx/x86_64-windows/Syphon.exe" App
      - name: Categorise build artifacts for macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mv target/gluonfx/x86_64-darwin/Syphon-1.0.0.pkg "target/gluonfx/x86_64-darwin/Syphon.pkg"
          mv target/gluonfx/x86_64-darwin/Syphon.app "target/gluonfx/x86_64-darwin/Syphon.app"
          mv "target/gluonfx/x86_64-darwin/Syphon.pkg" App
          mv "target/gluonfx/x86_64-darwin/Syphon.app" App
      - name: Tar build files # To prevent file permission loss
        run: tar -cvf ${{ matrix.os }}.tar App
      - name: Push generated artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-Build-Files
          path: ${{ matrix.os }}.tar

  generate-metadata:
    runs-on: ubuntu-latest
    needs: build-Syphon
    steps:
      - uses: actions/checkout@v4
      - name: Download Build artifacts
        uses: actions/download-artifact@v3
      - name: Make OS specific build directories
        run: |
          mkdir linux
          mkdir macos
          mkdir windows
      - name: Extract build files from tar
        run: |
          tar -xvf ubuntu-latest-Build-Files/ubuntu-latest.tar -C linux
          tar -xvf macos-latest-Build-Files/macos-latest.tar -C macos
          tar -xvf windows-latest-Build-Files/windows-latest.tar -C windows
      - name: Get Size of Build Artifacts
        run: |
          echo "App_LINUX_SIZE=$(echo `du -h 'linux/App/Syphon_linux'` | sed 's/ .*//')" >> "$GITHUB_ENV"
          echo "App_MACOS_PKG_SIZE=$(echo `du -h 'macos/App/Syphon.pkg'` | sed 's/ .*//')" >> "$GITHUB_ENV"
          echo "App_MACOS_APP_SIZE=$(echo `du -h 'macos/App/Syphon.app'` | sed 's/ .*//')" >> "$GITHUB_ENV"
          echo "App_WINDOWS_MSI_SIZE=$(echo `du -h 'windows/App/Syphon.msi'` | sed 's/ .*//')" >> "$GITHUB_ENV"
          echo "App_WINDOWS_EXE_SIZE=$(echo `du -h 'windows/App/Syphon.exe'` | sed 's/ .*//')" >> "$GITHUB_ENV"
      - name: Generate Artifact metadata summary
        run: |
          echo "# Syphon Built! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "## Build Artifacts :package: Summary :memo:" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifacts :package: Generated for Linux :penguin:" >> $GITHUB_STEP_SUMMARY
          echo "| Application Type | Artifact Name | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|---------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| App | Syphon_linux | $App_LINUX_SIZE |" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifacts :package: Generated for macOS :apple:" >> $GITHUB_STEP_SUMMARY
          echo "| Application Type | Artifact Name | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|---------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| App | Syphon.pkg | $App_MACOS_PKG_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| App | Syphon.app | $App_MACOS_APP_SIZE |" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifacts :package: Generated for Windows :window:" >> $GITHUB_STEP_SUMMARY
          echo "| Application Type | Artifact Name | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|---------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| App | Syphon.msi | $App_WINDOWS_MSI_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| App | Syphon.exe | $App_WINDOWS_EXE_SIZE |" >> $GITHUB_STEP_SUMMARY